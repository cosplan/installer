<?php

/**
 * Created by PhpStorm.
 * User: luky
 * Date: 22.6.16
 * Time: 8:15
 */
class PhpConfigGenerator
{
	/** @var array */
	private $data;
	
	/**
	 * PhpConfigGenerator constructor.
	 *
	 * @param array $data
	 */
	public function __construct(array $data)
	{
		$this->data = $data;
	}
	
	public function generate()
	{
		try {
			$now = date("j.n.Y H:i:s");
			ob_start();
			echo "<?php \n";
			echo "/*\n * Generated by PhpConfigGenerator at {$now} \n */\n";
			echo "return [\n";
			
			$this->build($this->data);
			
			echo "];\n\n";
			
			return ob_get_clean();
		} catch (PhpConfigGeneratorException $e) {
			$void = ob_get_clean();
			die($e . "\n");
		}
	}
	
	public function createFile($name)
	{
		file_put_contents($name, $this->generate());
	}
	
	private function printTabs($count)
	{
		for ($i = 0; $i < $count; $i++) {
			print "\t";
		}
	}
	
	private function build($array, $level = 0)
	{
		$iterator = 0;
		
		//Iterate over array
		foreach ($array as $key => $value) {
			$showIndex = $iterator !== $key;
			
			//print key
			$this->printTabs($level + 1);
			echo $showIndex ? "\"$key\" => " : "";
			
			//if is array, make next recursion
			if (is_array($value) || $value instanceof \Traversable) {
				echo "[\n";
				
				$this->build($value, $level + 1);
				
				$this->printTabs($level + 1);
				echo "],\n";
				//if is number, print as number
			} elseif (is_numeric($value)) {
				echo "$value,\n";
				//if is string print as string
			} elseif (is_string($value)) {
				echo "\"$value\",\n";
			} else {
				$type = gettype($value);
				
				if ($type === "object") {
					$type = get_class($value);
				}
				
				throw new PhpConfigGeneratorException("Undefined type `$type`");
			}
			
			$iterator++;
		}
	}
	
}

/**
 * Class PhpConfigGeneratorException
 */
class PhpConfigGeneratorException extends Exception
{
}
